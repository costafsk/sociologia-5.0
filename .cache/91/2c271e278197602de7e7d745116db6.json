{"id":"../node_modules/polybooljs/lib/intersecter.js","dependencies":[{"name":"/home/cassiana/DBO/sociologia-5.0/package.json","includedInParent":true,"mtime":1543792363178},{"name":"/home/cassiana/DBO/sociologia-5.0/node_modules/polybooljs/package.json","includedInParent":true,"mtime":1543792360654},{"name":"./linked-list","loc":{"line":9,"column":25},"parent":"/home/cassiana/DBO/sociologia-5.0/node_modules/polybooljs/lib/intersecter.js","resolved":"/home/cassiana/DBO/sociologia-5.0/node_modules/polybooljs/lib/linked-list.js"}],"generated":{"js":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// this is the core work-horse\n//\n\nvar LinkedList = require('./linked-list');\n\nfunction Intersecter(selfIntersection, eps, buildLog){\n\t// selfIntersection is true/false depending on the phase of the overall algorithm\n\n\t//\n\t// segment creation\n\t//\n\n\tfunction segmentNew(start, end){\n\t\treturn {\n\t\t\tid: buildLog ? buildLog.segmentId() : -1,\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\t\tmyFill: {\n\t\t\t\tabove: null, // is there fill above us?\n\t\t\t\tbelow: null  // is there fill below us?\n\t\t\t},\n\t\t\totherFill: null\n\t\t};\n\t}\n\n\tfunction segmentCopy(start, end, seg){\n\t\treturn {\n\t\t\tid: buildLog ? buildLog.segmentId() : -1,\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\t\tmyFill: {\n\t\t\t\tabove: seg.myFill.above,\n\t\t\t\tbelow: seg.myFill.below\n\t\t\t},\n\t\t\totherFill: null\n\t\t};\n\t}\n\n\t//\n\t// event logic\n\t//\n\n\tvar event_root = LinkedList.create();\n\n\tfunction eventCompare(p1_isStart, p1_1, p1_2, p2_isStart, p2_1, p2_2){\n\t\t// compare the selected points first\n\t\tvar comp = eps.pointsCompare(p1_1, p2_1);\n\t\tif (comp !== 0)\n\t\t\treturn comp;\n\t\t// the selected points are the same\n\n\t\tif (eps.pointsSame(p1_2, p2_2)) // if the non-selected points are the same too...\n\t\t\treturn 0; // then the segments are equal\n\n\t\tif (p1_isStart !== p2_isStart) // if one is a start and the other isn't...\n\t\t\treturn p1_isStart ? 1 : -1; // favor the one that isn't the start\n\n\t\t// otherwise, we'll have to calculate which one is below the other manually\n\t\treturn eps.pointAboveOrOnLine(p1_2,\n\t\t\tp2_isStart ? p2_1 : p2_2, // order matters\n\t\t\tp2_isStart ? p2_2 : p2_1\n\t\t) ? 1 : -1;\n\t}\n\n\tfunction eventAdd(ev, other_pt){\n\t\tevent_root.insertBefore(ev, function(here){\n\t\t\t// should ev be inserted before here?\n\t\t\tvar comp = eventCompare(\n\t\t\t\tev  .isStart, ev  .pt,      other_pt,\n\t\t\t\there.isStart, here.pt, here.other.pt\n\t\t\t);\n\t\t\treturn comp < 0;\n\t\t});\n\t}\n\n\tfunction eventAddSegmentStart(seg, primary){\n\t\tvar ev_start = LinkedList.node({\n\t\t\tisStart: true,\n\t\t\tpt: seg.start,\n\t\t\tseg: seg,\n\t\t\tprimary: primary,\n\t\t\tother: null,\n\t\t\tstatus: null\n\t\t});\n\t\teventAdd(ev_start, seg.end);\n\t\treturn ev_start;\n\t}\n\n\tfunction eventAddSegmentEnd(ev_start, seg, primary){\n\t\tvar ev_end = LinkedList.node({\n\t\t\tisStart: false,\n\t\t\tpt: seg.end,\n\t\t\tseg: seg,\n\t\t\tprimary: primary,\n\t\t\tother: ev_start,\n\t\t\tstatus: null\n\t\t});\n\t\tev_start.other = ev_end;\n\t\teventAdd(ev_end, ev_start.pt);\n\t}\n\n\tfunction eventAddSegment(seg, primary){\n\t\tvar ev_start = eventAddSegmentStart(seg, primary);\n\t\teventAddSegmentEnd(ev_start, seg, primary);\n\t\treturn ev_start;\n\t}\n\n\tfunction eventUpdateEnd(ev, end){\n\t\t// slides an end backwards\n\t\t//   (start)------------(end)    to:\n\t\t//   (start)---(end)\n\n\t\tif (buildLog)\n\t\t\tbuildLog.segmentChop(ev.seg, end);\n\n\t\tev.other.remove();\n\t\tev.seg.end = end;\n\t\tev.other.pt = end;\n\t\teventAdd(ev.other, ev.pt);\n\t}\n\n\tfunction eventDivide(ev, pt){\n\t\tvar ns = segmentCopy(pt, ev.seg.end, ev.seg);\n\t\teventUpdateEnd(ev, pt);\n\t\treturn eventAddSegment(ns, ev.primary);\n\t}\n\n\tfunction calculate(primaryPolyInverted, secondaryPolyInverted){\n\t\t// if selfIntersection is true then there is no secondary polygon, so that isn't used\n\n\t\t//\n\t\t// status logic\n\t\t//\n\n\t\tvar status_root = LinkedList.create();\n\n\t\tfunction statusCompare(ev1, ev2){\n\t\t\tvar a1 = ev1.seg.start;\n\t\t\tvar a2 = ev1.seg.end;\n\t\t\tvar b1 = ev2.seg.start;\n\t\t\tvar b2 = ev2.seg.end;\n\n\t\t\tif (eps.pointsCollinear(a1, b1, b2)){\n\t\t\t\tif (eps.pointsCollinear(a2, b1, b2))\n\t\t\t\t\treturn 1;//eventCompare(true, a1, a2, true, b1, b2);\n\t\t\t\treturn eps.pointAboveOrOnLine(a2, b1, b2) ? 1 : -1;\n\t\t\t}\n\t\t\treturn eps.pointAboveOrOnLine(a1, b1, b2) ? 1 : -1;\n\t\t}\n\n\t\tfunction statusFindSurrounding(ev){\n\t\t\treturn status_root.findTransition(function(here){\n\t\t\t\tvar comp = statusCompare(ev, here.ev);\n\t\t\t\treturn comp > 0;\n\t\t\t});\n\t\t}\n\n\t\tfunction checkIntersection(ev1, ev2){\n\t\t\t// returns the segment equal to ev1, or false if nothing equal\n\n\t\t\tvar seg1 = ev1.seg;\n\t\t\tvar seg2 = ev2.seg;\n\t\t\tvar a1 = seg1.start;\n\t\t\tvar a2 = seg1.end;\n\t\t\tvar b1 = seg2.start;\n\t\t\tvar b2 = seg2.end;\n\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.checkIntersection(seg1, seg2);\n\n\t\t\tvar i = eps.linesIntersect(a1, a2, b1, b2);\n\n\t\t\tif (i === false){\n\t\t\t\t// segments are parallel or coincident\n\n\t\t\t\t// if points aren't collinear, then the segments are parallel, so no intersections\n\t\t\t\tif (!eps.pointsCollinear(a1, a2, b1))\n\t\t\t\t\treturn false;\n\t\t\t\t// otherwise, segments are on top of each other somehow (aka coincident)\n\n\t\t\t\tif (eps.pointsSame(a1, b2) || eps.pointsSame(a2, b1))\n\t\t\t\t\treturn false; // segments touch at endpoints... no intersection\n\n\t\t\t\tvar a1_equ_b1 = eps.pointsSame(a1, b1);\n\t\t\t\tvar a2_equ_b2 = eps.pointsSame(a2, b2);\n\n\t\t\t\tif (a1_equ_b1 && a2_equ_b2)\n\t\t\t\t\treturn ev2; // segments are exactly equal\n\n\t\t\t\tvar a1_between = !a1_equ_b1 && eps.pointBetween(a1, b1, b2);\n\t\t\t\tvar a2_between = !a2_equ_b2 && eps.pointBetween(a2, b1, b2);\n\n\t\t\t\t// handy for debugging:\n\t\t\t\t// buildLog.log({\n\t\t\t\t//\ta1_equ_b1: a1_equ_b1,\n\t\t\t\t//\ta2_equ_b2: a2_equ_b2,\n\t\t\t\t//\ta1_between: a1_between,\n\t\t\t\t//\ta2_between: a2_between\n\t\t\t\t// });\n\n\t\t\t\tif (a1_equ_b1){\n\t\t\t\t\tif (a2_between){\n\t\t\t\t\t\t//  (a1)---(a2)\n\t\t\t\t\t\t//  (b1)----------(b2)\n\t\t\t\t\t\teventDivide(ev2, a2);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t//  (a1)----------(a2)\n\t\t\t\t\t\t//  (b1)---(b2)\n\t\t\t\t\t\teventDivide(ev1, b2);\n\t\t\t\t\t}\n\t\t\t\t\treturn ev2;\n\t\t\t\t}\n\t\t\t\telse if (a1_between){\n\t\t\t\t\tif (!a2_equ_b2){\n\t\t\t\t\t\t// make a2 equal to b2\n\t\t\t\t\t\tif (a2_between){\n\t\t\t\t\t\t\t//         (a1)---(a2)\n\t\t\t\t\t\t\t//  (b1)-----------------(b2)\n\t\t\t\t\t\t\teventDivide(ev2, a2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t//         (a1)----------(a2)\n\t\t\t\t\t\t\t//  (b1)----------(b2)\n\t\t\t\t\t\t\teventDivide(ev1, b2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//         (a1)---(a2)\n\t\t\t\t\t//  (b1)----------(b2)\n\t\t\t\t\teventDivide(ev2, a1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// otherwise, lines intersect at i.pt, which may or may not be between the endpoints\n\n\t\t\t\t// is A divided between its endpoints? (exclusive)\n\t\t\t\tif (i.alongA === 0){\n\t\t\t\t\tif (i.alongB === -1) // yes, at exactly b1\n\t\t\t\t\t\teventDivide(ev1, b1);\n\t\t\t\t\telse if (i.alongB === 0) // yes, somewhere between B's endpoints\n\t\t\t\t\t\teventDivide(ev1, i.pt);\n\t\t\t\t\telse if (i.alongB === 1) // yes, at exactly b2\n\t\t\t\t\t\teventDivide(ev1, b2);\n\t\t\t\t}\n\n\t\t\t\t// is B divided between its endpoints? (exclusive)\n\t\t\t\tif (i.alongB === 0){\n\t\t\t\t\tif (i.alongA === -1) // yes, at exactly a1\n\t\t\t\t\t\teventDivide(ev2, a1);\n\t\t\t\t\telse if (i.alongA === 0) // yes, somewhere between A's endpoints (exclusive)\n\t\t\t\t\t\teventDivide(ev2, i.pt);\n\t\t\t\t\telse if (i.alongA === 1) // yes, at exactly a2\n\t\t\t\t\t\teventDivide(ev2, a2);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t//\n\t\t// main event loop\n\t\t//\n\t\tvar segments = [];\n\t\twhile (!event_root.isEmpty()){\n\t\t\tvar ev = event_root.getHead();\n\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.vert(ev.pt[0]);\n\n\t\t\tif (ev.isStart){\n\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.segmentNew(ev.seg, ev.primary);\n\n\t\t\t\tvar surrounding = statusFindSurrounding(ev);\n\t\t\t\tvar above = surrounding.before ? surrounding.before.ev : null;\n\t\t\t\tvar below = surrounding.after ? surrounding.after.ev : null;\n\n\t\t\t\tif (buildLog){\n\t\t\t\t\tbuildLog.tempStatus(\n\t\t\t\t\t\tev.seg,\n\t\t\t\t\t\tabove ? above.seg : false,\n\t\t\t\t\t\tbelow ? below.seg : false\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tfunction checkBothIntersections(){\n\t\t\t\t\tif (above){\n\t\t\t\t\t\tvar eve = checkIntersection(ev, above);\n\t\t\t\t\t\tif (eve)\n\t\t\t\t\t\t\treturn eve;\n\t\t\t\t\t}\n\t\t\t\t\tif (below)\n\t\t\t\t\t\treturn checkIntersection(ev, below);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar eve = checkBothIntersections();\n\t\t\t\tif (eve){\n\t\t\t\t\t// ev and eve are equal\n\t\t\t\t\t// we'll keep eve and throw away ev\n\n\t\t\t\t\t// merge ev.seg's fill information into eve.seg\n\n\t\t\t\t\tif (selfIntersection){\n\t\t\t\t\t\tvar toggle; // are we a toggling edge?\n\t\t\t\t\t\tif (ev.seg.myFill.below === null)\n\t\t\t\t\t\t\ttoggle = true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttoggle = ev.seg.myFill.above !== ev.seg.myFill.below;\n\n\t\t\t\t\t\t// merge two segments that belong to the same polygon\n\t\t\t\t\t\t// think of this as sandwiching two segments together, where `eve.seg` is\n\t\t\t\t\t\t// the bottom -- this will cause the above fill flag to toggle\n\t\t\t\t\t\tif (toggle)\n\t\t\t\t\t\t\teve.seg.myFill.above = !eve.seg.myFill.above;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// merge two segments that belong to different polygons\n\t\t\t\t\t\t// each segment has distinct knowledge, so no special logic is needed\n\t\t\t\t\t\t// note that this can only happen once per segment in this phase, because we\n\t\t\t\t\t\t// are guaranteed that all self-intersections are gone\n\t\t\t\t\t\teve.seg.otherFill = ev.seg.myFill;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\tbuildLog.segmentUpdate(eve.seg);\n\n\t\t\t\t\tev.other.remove();\n\t\t\t\t\tev.remove();\n\t\t\t\t}\n\n\t\t\t\tif (event_root.getHead() !== ev){\n\t\t\t\t\t// something was inserted before us in the event queue, so loop back around and\n\t\t\t\t\t// process it before continuing\n\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\tbuildLog.rewind(ev.seg);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t//\n\t\t\t\t// calculate fill flags\n\t\t\t\t//\n\t\t\t\tif (selfIntersection){\n\t\t\t\t\tvar toggle; // are we a toggling edge?\n\t\t\t\t\tif (ev.seg.myFill.below === null) // if we are a new segment...\n\t\t\t\t\t\ttoggle = true; // then we toggle\n\t\t\t\t\telse // we are a segment that has previous knowledge from a division\n\t\t\t\t\t\ttoggle = ev.seg.myFill.above !== ev.seg.myFill.below; // calculate toggle\n\n\t\t\t\t\t// next, calculate whether we are filled below us\n\t\t\t\t\tif (!below){ // if nothing is below us...\n\t\t\t\t\t\t// we are filled below us if the polygon is inverted\n\t\t\t\t\t\tev.seg.myFill.below = primaryPolyInverted;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// otherwise, we know the answer -- it's the same if whatever is below\n\t\t\t\t\t\t// us is filled above it\n\t\t\t\t\t\tev.seg.myFill.below = below.seg.myFill.above;\n\t\t\t\t\t}\n\n\t\t\t\t\t// since now we know if we're filled below us, we can calculate whether\n\t\t\t\t\t// we're filled above us by applying toggle to whatever is below us\n\t\t\t\t\tif (toggle)\n\t\t\t\t\t\tev.seg.myFill.above = !ev.seg.myFill.below;\n\t\t\t\t\telse\n\t\t\t\t\t\tev.seg.myFill.above = ev.seg.myFill.below;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// now we fill in any missing transition information, since we are all-knowing\n\t\t\t\t\t// at this point\n\n\t\t\t\t\tif (ev.seg.otherFill === null){\n\t\t\t\t\t\t// if we don't have other information, then we need to figure out if we're\n\t\t\t\t\t\t// inside the other polygon\n\t\t\t\t\t\tvar inside;\n\t\t\t\t\t\tif (!below){\n\t\t\t\t\t\t\t// if nothing is below us, then we're inside if the other polygon is\n\t\t\t\t\t\t\t// inverted\n\t\t\t\t\t\t\tinside =\n\t\t\t\t\t\t\t\tev.primary ? secondaryPolyInverted : primaryPolyInverted;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{ // otherwise, something is below us\n\t\t\t\t\t\t\t// so copy the below segment's other polygon's above\n\t\t\t\t\t\t\tif (ev.primary === below.primary)\n\t\t\t\t\t\t\t\tinside = below.seg.otherFill.above;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tinside = below.seg.myFill.above;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tev.seg.otherFill = {\n\t\t\t\t\t\t\tabove: inside,\n\t\t\t\t\t\t\tbelow: inside\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (buildLog){\n\t\t\t\t\tbuildLog.status(\n\t\t\t\t\t\tev.seg,\n\t\t\t\t\t\tabove ? above.seg : false,\n\t\t\t\t\t\tbelow ? below.seg : false\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// insert the status and remember it for later removal\n\t\t\t\tev.other.status = surrounding.insert(LinkedList.node({ ev: ev }));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvar st = ev.status;\n\n\t\t\t\tif (st === null){\n\t\t\t\t\tthrow new Error('PolyBool: Zero-length segment detected; your epsilon is ' +\n\t\t\t\t\t\t'probably too small or too large');\n\t\t\t\t}\n\n\t\t\t\t// removing the status will create two new adjacent edges, so we'll need to check\n\t\t\t\t// for those\n\t\t\t\tif (status_root.exists(st.prev) && status_root.exists(st.next))\n\t\t\t\t\tcheckIntersection(st.prev.ev, st.next.ev);\n\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.statusRemove(st.ev.seg);\n\n\t\t\t\t// remove the status\n\t\t\t\tst.remove();\n\n\t\t\t\t// if we've reached this point, we've calculated everything there is to know, so\n\t\t\t\t// save the segment for reporting\n\t\t\t\tif (!ev.primary){\n\t\t\t\t\t// make sure `seg.myFill` actually points to the primary polygon though\n\t\t\t\t\tvar s = ev.seg.myFill;\n\t\t\t\t\tev.seg.myFill = ev.seg.otherFill;\n\t\t\t\t\tev.seg.otherFill = s;\n\t\t\t\t}\n\t\t\t\tsegments.push(ev.seg);\n\t\t\t}\n\n\t\t\t// remove the event and continue\n\t\t\tevent_root.getHead().remove();\n\t\t}\n\n\t\tif (buildLog)\n\t\t\tbuildLog.done();\n\n\t\treturn segments;\n\t}\n\n\t// return the appropriate API depending on what we're doing\n\tif (!selfIntersection){\n\t\t// performing combination of polygons, so only deal with already-processed segments\n\t\treturn {\n\t\t\tcalculate: function(segments1, inverted1, segments2, inverted2){\n\t\t\t\t// segmentsX come from the self-intersection API, or this API\n\t\t\t\t// invertedX is whether we treat that list of segments as an inverted polygon or not\n\t\t\t\t// returns segments that can be used for further operations\n\t\t\t\tsegments1.forEach(function(seg){\n\t\t\t\t\teventAddSegment(segmentCopy(seg.start, seg.end, seg), true);\n\t\t\t\t});\n\t\t\t\tsegments2.forEach(function(seg){\n\t\t\t\t\teventAddSegment(segmentCopy(seg.start, seg.end, seg), false);\n\t\t\t\t});\n\t\t\t\treturn calculate(inverted1, inverted2);\n\t\t\t}\n\t\t};\n\t}\n\n\t// otherwise, performing self-intersection, so deal with regions\n\treturn {\n\t\taddRegion: function(region){\n\t\t\t// regions are a list of points:\n\t\t\t//  [ [0, 0], [100, 0], [50, 100] ]\n\t\t\t// you can add multiple regions before running calculate\n\t\t\tvar pt1;\n\t\t\tvar pt2 = region[region.length - 1];\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tpt1 = pt2;\n\t\t\t\tpt2 = region[i];\n\n\t\t\t\tvar forward = eps.pointsCompare(pt1, pt2);\n\t\t\t\tif (forward === 0) // points are equal, so we have a zero-length segment\n\t\t\t\t\tcontinue; // just skip it\n\n\t\t\t\teventAddSegment(\n\t\t\t\t\tsegmentNew(\n\t\t\t\t\t\tforward < 0 ? pt1 : pt2,\n\t\t\t\t\t\tforward < 0 ? pt2 : pt1\n\t\t\t\t\t),\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tcalculate: function(inverted){\n\t\t\t// is the polygon inverted?\n\t\t\t// returns segments\n\t\t\treturn calculate(inverted, false);\n\t\t}\n\t};\n}\n\nmodule.exports = Intersecter;\n","map":{"mappings":[{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/polybooljs/lib/intersecter.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}}],"sources":{"../node_modules/polybooljs/lib/intersecter.js":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// this is the core work-horse\n//\n\nvar LinkedList = require('./linked-list');\n\nfunction Intersecter(selfIntersection, eps, buildLog){\n\t// selfIntersection is true/false depending on the phase of the overall algorithm\n\n\t//\n\t// segment creation\n\t//\n\n\tfunction segmentNew(start, end){\n\t\treturn {\n\t\t\tid: buildLog ? buildLog.segmentId() : -1,\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\t\tmyFill: {\n\t\t\t\tabove: null, // is there fill above us?\n\t\t\t\tbelow: null  // is there fill below us?\n\t\t\t},\n\t\t\totherFill: null\n\t\t};\n\t}\n\n\tfunction segmentCopy(start, end, seg){\n\t\treturn {\n\t\t\tid: buildLog ? buildLog.segmentId() : -1,\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\t\tmyFill: {\n\t\t\t\tabove: seg.myFill.above,\n\t\t\t\tbelow: seg.myFill.below\n\t\t\t},\n\t\t\totherFill: null\n\t\t};\n\t}\n\n\t//\n\t// event logic\n\t//\n\n\tvar event_root = LinkedList.create();\n\n\tfunction eventCompare(p1_isStart, p1_1, p1_2, p2_isStart, p2_1, p2_2){\n\t\t// compare the selected points first\n\t\tvar comp = eps.pointsCompare(p1_1, p2_1);\n\t\tif (comp !== 0)\n\t\t\treturn comp;\n\t\t// the selected points are the same\n\n\t\tif (eps.pointsSame(p1_2, p2_2)) // if the non-selected points are the same too...\n\t\t\treturn 0; // then the segments are equal\n\n\t\tif (p1_isStart !== p2_isStart) // if one is a start and the other isn't...\n\t\t\treturn p1_isStart ? 1 : -1; // favor the one that isn't the start\n\n\t\t// otherwise, we'll have to calculate which one is below the other manually\n\t\treturn eps.pointAboveOrOnLine(p1_2,\n\t\t\tp2_isStart ? p2_1 : p2_2, // order matters\n\t\t\tp2_isStart ? p2_2 : p2_1\n\t\t) ? 1 : -1;\n\t}\n\n\tfunction eventAdd(ev, other_pt){\n\t\tevent_root.insertBefore(ev, function(here){\n\t\t\t// should ev be inserted before here?\n\t\t\tvar comp = eventCompare(\n\t\t\t\tev  .isStart, ev  .pt,      other_pt,\n\t\t\t\there.isStart, here.pt, here.other.pt\n\t\t\t);\n\t\t\treturn comp < 0;\n\t\t});\n\t}\n\n\tfunction eventAddSegmentStart(seg, primary){\n\t\tvar ev_start = LinkedList.node({\n\t\t\tisStart: true,\n\t\t\tpt: seg.start,\n\t\t\tseg: seg,\n\t\t\tprimary: primary,\n\t\t\tother: null,\n\t\t\tstatus: null\n\t\t});\n\t\teventAdd(ev_start, seg.end);\n\t\treturn ev_start;\n\t}\n\n\tfunction eventAddSegmentEnd(ev_start, seg, primary){\n\t\tvar ev_end = LinkedList.node({\n\t\t\tisStart: false,\n\t\t\tpt: seg.end,\n\t\t\tseg: seg,\n\t\t\tprimary: primary,\n\t\t\tother: ev_start,\n\t\t\tstatus: null\n\t\t});\n\t\tev_start.other = ev_end;\n\t\teventAdd(ev_end, ev_start.pt);\n\t}\n\n\tfunction eventAddSegment(seg, primary){\n\t\tvar ev_start = eventAddSegmentStart(seg, primary);\n\t\teventAddSegmentEnd(ev_start, seg, primary);\n\t\treturn ev_start;\n\t}\n\n\tfunction eventUpdateEnd(ev, end){\n\t\t// slides an end backwards\n\t\t//   (start)------------(end)    to:\n\t\t//   (start)---(end)\n\n\t\tif (buildLog)\n\t\t\tbuildLog.segmentChop(ev.seg, end);\n\n\t\tev.other.remove();\n\t\tev.seg.end = end;\n\t\tev.other.pt = end;\n\t\teventAdd(ev.other, ev.pt);\n\t}\n\n\tfunction eventDivide(ev, pt){\n\t\tvar ns = segmentCopy(pt, ev.seg.end, ev.seg);\n\t\teventUpdateEnd(ev, pt);\n\t\treturn eventAddSegment(ns, ev.primary);\n\t}\n\n\tfunction calculate(primaryPolyInverted, secondaryPolyInverted){\n\t\t// if selfIntersection is true then there is no secondary polygon, so that isn't used\n\n\t\t//\n\t\t// status logic\n\t\t//\n\n\t\tvar status_root = LinkedList.create();\n\n\t\tfunction statusCompare(ev1, ev2){\n\t\t\tvar a1 = ev1.seg.start;\n\t\t\tvar a2 = ev1.seg.end;\n\t\t\tvar b1 = ev2.seg.start;\n\t\t\tvar b2 = ev2.seg.end;\n\n\t\t\tif (eps.pointsCollinear(a1, b1, b2)){\n\t\t\t\tif (eps.pointsCollinear(a2, b1, b2))\n\t\t\t\t\treturn 1;//eventCompare(true, a1, a2, true, b1, b2);\n\t\t\t\treturn eps.pointAboveOrOnLine(a2, b1, b2) ? 1 : -1;\n\t\t\t}\n\t\t\treturn eps.pointAboveOrOnLine(a1, b1, b2) ? 1 : -1;\n\t\t}\n\n\t\tfunction statusFindSurrounding(ev){\n\t\t\treturn status_root.findTransition(function(here){\n\t\t\t\tvar comp = statusCompare(ev, here.ev);\n\t\t\t\treturn comp > 0;\n\t\t\t});\n\t\t}\n\n\t\tfunction checkIntersection(ev1, ev2){\n\t\t\t// returns the segment equal to ev1, or false if nothing equal\n\n\t\t\tvar seg1 = ev1.seg;\n\t\t\tvar seg2 = ev2.seg;\n\t\t\tvar a1 = seg1.start;\n\t\t\tvar a2 = seg1.end;\n\t\t\tvar b1 = seg2.start;\n\t\t\tvar b2 = seg2.end;\n\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.checkIntersection(seg1, seg2);\n\n\t\t\tvar i = eps.linesIntersect(a1, a2, b1, b2);\n\n\t\t\tif (i === false){\n\t\t\t\t// segments are parallel or coincident\n\n\t\t\t\t// if points aren't collinear, then the segments are parallel, so no intersections\n\t\t\t\tif (!eps.pointsCollinear(a1, a2, b1))\n\t\t\t\t\treturn false;\n\t\t\t\t// otherwise, segments are on top of each other somehow (aka coincident)\n\n\t\t\t\tif (eps.pointsSame(a1, b2) || eps.pointsSame(a2, b1))\n\t\t\t\t\treturn false; // segments touch at endpoints... no intersection\n\n\t\t\t\tvar a1_equ_b1 = eps.pointsSame(a1, b1);\n\t\t\t\tvar a2_equ_b2 = eps.pointsSame(a2, b2);\n\n\t\t\t\tif (a1_equ_b1 && a2_equ_b2)\n\t\t\t\t\treturn ev2; // segments are exactly equal\n\n\t\t\t\tvar a1_between = !a1_equ_b1 && eps.pointBetween(a1, b1, b2);\n\t\t\t\tvar a2_between = !a2_equ_b2 && eps.pointBetween(a2, b1, b2);\n\n\t\t\t\t// handy for debugging:\n\t\t\t\t// buildLog.log({\n\t\t\t\t//\ta1_equ_b1: a1_equ_b1,\n\t\t\t\t//\ta2_equ_b2: a2_equ_b2,\n\t\t\t\t//\ta1_between: a1_between,\n\t\t\t\t//\ta2_between: a2_between\n\t\t\t\t// });\n\n\t\t\t\tif (a1_equ_b1){\n\t\t\t\t\tif (a2_between){\n\t\t\t\t\t\t//  (a1)---(a2)\n\t\t\t\t\t\t//  (b1)----------(b2)\n\t\t\t\t\t\teventDivide(ev2, a2);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t//  (a1)----------(a2)\n\t\t\t\t\t\t//  (b1)---(b2)\n\t\t\t\t\t\teventDivide(ev1, b2);\n\t\t\t\t\t}\n\t\t\t\t\treturn ev2;\n\t\t\t\t}\n\t\t\t\telse if (a1_between){\n\t\t\t\t\tif (!a2_equ_b2){\n\t\t\t\t\t\t// make a2 equal to b2\n\t\t\t\t\t\tif (a2_between){\n\t\t\t\t\t\t\t//         (a1)---(a2)\n\t\t\t\t\t\t\t//  (b1)-----------------(b2)\n\t\t\t\t\t\t\teventDivide(ev2, a2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t//         (a1)----------(a2)\n\t\t\t\t\t\t\t//  (b1)----------(b2)\n\t\t\t\t\t\t\teventDivide(ev1, b2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//         (a1)---(a2)\n\t\t\t\t\t//  (b1)----------(b2)\n\t\t\t\t\teventDivide(ev2, a1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// otherwise, lines intersect at i.pt, which may or may not be between the endpoints\n\n\t\t\t\t// is A divided between its endpoints? (exclusive)\n\t\t\t\tif (i.alongA === 0){\n\t\t\t\t\tif (i.alongB === -1) // yes, at exactly b1\n\t\t\t\t\t\teventDivide(ev1, b1);\n\t\t\t\t\telse if (i.alongB === 0) // yes, somewhere between B's endpoints\n\t\t\t\t\t\teventDivide(ev1, i.pt);\n\t\t\t\t\telse if (i.alongB === 1) // yes, at exactly b2\n\t\t\t\t\t\teventDivide(ev1, b2);\n\t\t\t\t}\n\n\t\t\t\t// is B divided between its endpoints? (exclusive)\n\t\t\t\tif (i.alongB === 0){\n\t\t\t\t\tif (i.alongA === -1) // yes, at exactly a1\n\t\t\t\t\t\teventDivide(ev2, a1);\n\t\t\t\t\telse if (i.alongA === 0) // yes, somewhere between A's endpoints (exclusive)\n\t\t\t\t\t\teventDivide(ev2, i.pt);\n\t\t\t\t\telse if (i.alongA === 1) // yes, at exactly a2\n\t\t\t\t\t\teventDivide(ev2, a2);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t//\n\t\t// main event loop\n\t\t//\n\t\tvar segments = [];\n\t\twhile (!event_root.isEmpty()){\n\t\t\tvar ev = event_root.getHead();\n\n\t\t\tif (buildLog)\n\t\t\t\tbuildLog.vert(ev.pt[0]);\n\n\t\t\tif (ev.isStart){\n\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.segmentNew(ev.seg, ev.primary);\n\n\t\t\t\tvar surrounding = statusFindSurrounding(ev);\n\t\t\t\tvar above = surrounding.before ? surrounding.before.ev : null;\n\t\t\t\tvar below = surrounding.after ? surrounding.after.ev : null;\n\n\t\t\t\tif (buildLog){\n\t\t\t\t\tbuildLog.tempStatus(\n\t\t\t\t\t\tev.seg,\n\t\t\t\t\t\tabove ? above.seg : false,\n\t\t\t\t\t\tbelow ? below.seg : false\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tfunction checkBothIntersections(){\n\t\t\t\t\tif (above){\n\t\t\t\t\t\tvar eve = checkIntersection(ev, above);\n\t\t\t\t\t\tif (eve)\n\t\t\t\t\t\t\treturn eve;\n\t\t\t\t\t}\n\t\t\t\t\tif (below)\n\t\t\t\t\t\treturn checkIntersection(ev, below);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar eve = checkBothIntersections();\n\t\t\t\tif (eve){\n\t\t\t\t\t// ev and eve are equal\n\t\t\t\t\t// we'll keep eve and throw away ev\n\n\t\t\t\t\t// merge ev.seg's fill information into eve.seg\n\n\t\t\t\t\tif (selfIntersection){\n\t\t\t\t\t\tvar toggle; // are we a toggling edge?\n\t\t\t\t\t\tif (ev.seg.myFill.below === null)\n\t\t\t\t\t\t\ttoggle = true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttoggle = ev.seg.myFill.above !== ev.seg.myFill.below;\n\n\t\t\t\t\t\t// merge two segments that belong to the same polygon\n\t\t\t\t\t\t// think of this as sandwiching two segments together, where `eve.seg` is\n\t\t\t\t\t\t// the bottom -- this will cause the above fill flag to toggle\n\t\t\t\t\t\tif (toggle)\n\t\t\t\t\t\t\teve.seg.myFill.above = !eve.seg.myFill.above;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// merge two segments that belong to different polygons\n\t\t\t\t\t\t// each segment has distinct knowledge, so no special logic is needed\n\t\t\t\t\t\t// note that this can only happen once per segment in this phase, because we\n\t\t\t\t\t\t// are guaranteed that all self-intersections are gone\n\t\t\t\t\t\teve.seg.otherFill = ev.seg.myFill;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\tbuildLog.segmentUpdate(eve.seg);\n\n\t\t\t\t\tev.other.remove();\n\t\t\t\t\tev.remove();\n\t\t\t\t}\n\n\t\t\t\tif (event_root.getHead() !== ev){\n\t\t\t\t\t// something was inserted before us in the event queue, so loop back around and\n\t\t\t\t\t// process it before continuing\n\t\t\t\t\tif (buildLog)\n\t\t\t\t\t\tbuildLog.rewind(ev.seg);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t//\n\t\t\t\t// calculate fill flags\n\t\t\t\t//\n\t\t\t\tif (selfIntersection){\n\t\t\t\t\tvar toggle; // are we a toggling edge?\n\t\t\t\t\tif (ev.seg.myFill.below === null) // if we are a new segment...\n\t\t\t\t\t\ttoggle = true; // then we toggle\n\t\t\t\t\telse // we are a segment that has previous knowledge from a division\n\t\t\t\t\t\ttoggle = ev.seg.myFill.above !== ev.seg.myFill.below; // calculate toggle\n\n\t\t\t\t\t// next, calculate whether we are filled below us\n\t\t\t\t\tif (!below){ // if nothing is below us...\n\t\t\t\t\t\t// we are filled below us if the polygon is inverted\n\t\t\t\t\t\tev.seg.myFill.below = primaryPolyInverted;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// otherwise, we know the answer -- it's the same if whatever is below\n\t\t\t\t\t\t// us is filled above it\n\t\t\t\t\t\tev.seg.myFill.below = below.seg.myFill.above;\n\t\t\t\t\t}\n\n\t\t\t\t\t// since now we know if we're filled below us, we can calculate whether\n\t\t\t\t\t// we're filled above us by applying toggle to whatever is below us\n\t\t\t\t\tif (toggle)\n\t\t\t\t\t\tev.seg.myFill.above = !ev.seg.myFill.below;\n\t\t\t\t\telse\n\t\t\t\t\t\tev.seg.myFill.above = ev.seg.myFill.below;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// now we fill in any missing transition information, since we are all-knowing\n\t\t\t\t\t// at this point\n\n\t\t\t\t\tif (ev.seg.otherFill === null){\n\t\t\t\t\t\t// if we don't have other information, then we need to figure out if we're\n\t\t\t\t\t\t// inside the other polygon\n\t\t\t\t\t\tvar inside;\n\t\t\t\t\t\tif (!below){\n\t\t\t\t\t\t\t// if nothing is below us, then we're inside if the other polygon is\n\t\t\t\t\t\t\t// inverted\n\t\t\t\t\t\t\tinside =\n\t\t\t\t\t\t\t\tev.primary ? secondaryPolyInverted : primaryPolyInverted;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{ // otherwise, something is below us\n\t\t\t\t\t\t\t// so copy the below segment's other polygon's above\n\t\t\t\t\t\t\tif (ev.primary === below.primary)\n\t\t\t\t\t\t\t\tinside = below.seg.otherFill.above;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tinside = below.seg.myFill.above;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tev.seg.otherFill = {\n\t\t\t\t\t\t\tabove: inside,\n\t\t\t\t\t\t\tbelow: inside\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (buildLog){\n\t\t\t\t\tbuildLog.status(\n\t\t\t\t\t\tev.seg,\n\t\t\t\t\t\tabove ? above.seg : false,\n\t\t\t\t\t\tbelow ? below.seg : false\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// insert the status and remember it for later removal\n\t\t\t\tev.other.status = surrounding.insert(LinkedList.node({ ev: ev }));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvar st = ev.status;\n\n\t\t\t\tif (st === null){\n\t\t\t\t\tthrow new Error('PolyBool: Zero-length segment detected; your epsilon is ' +\n\t\t\t\t\t\t'probably too small or too large');\n\t\t\t\t}\n\n\t\t\t\t// removing the status will create two new adjacent edges, so we'll need to check\n\t\t\t\t// for those\n\t\t\t\tif (status_root.exists(st.prev) && status_root.exists(st.next))\n\t\t\t\t\tcheckIntersection(st.prev.ev, st.next.ev);\n\n\t\t\t\tif (buildLog)\n\t\t\t\t\tbuildLog.statusRemove(st.ev.seg);\n\n\t\t\t\t// remove the status\n\t\t\t\tst.remove();\n\n\t\t\t\t// if we've reached this point, we've calculated everything there is to know, so\n\t\t\t\t// save the segment for reporting\n\t\t\t\tif (!ev.primary){\n\t\t\t\t\t// make sure `seg.myFill` actually points to the primary polygon though\n\t\t\t\t\tvar s = ev.seg.myFill;\n\t\t\t\t\tev.seg.myFill = ev.seg.otherFill;\n\t\t\t\t\tev.seg.otherFill = s;\n\t\t\t\t}\n\t\t\t\tsegments.push(ev.seg);\n\t\t\t}\n\n\t\t\t// remove the event and continue\n\t\t\tevent_root.getHead().remove();\n\t\t}\n\n\t\tif (buildLog)\n\t\t\tbuildLog.done();\n\n\t\treturn segments;\n\t}\n\n\t// return the appropriate API depending on what we're doing\n\tif (!selfIntersection){\n\t\t// performing combination of polygons, so only deal with already-processed segments\n\t\treturn {\n\t\t\tcalculate: function(segments1, inverted1, segments2, inverted2){\n\t\t\t\t// segmentsX come from the self-intersection API, or this API\n\t\t\t\t// invertedX is whether we treat that list of segments as an inverted polygon or not\n\t\t\t\t// returns segments that can be used for further operations\n\t\t\t\tsegments1.forEach(function(seg){\n\t\t\t\t\teventAddSegment(segmentCopy(seg.start, seg.end, seg), true);\n\t\t\t\t});\n\t\t\t\tsegments2.forEach(function(seg){\n\t\t\t\t\teventAddSegment(segmentCopy(seg.start, seg.end, seg), false);\n\t\t\t\t});\n\t\t\t\treturn calculate(inverted1, inverted2);\n\t\t\t}\n\t\t};\n\t}\n\n\t// otherwise, performing self-intersection, so deal with regions\n\treturn {\n\t\taddRegion: function(region){\n\t\t\t// regions are a list of points:\n\t\t\t//  [ [0, 0], [100, 0], [50, 100] ]\n\t\t\t// you can add multiple regions before running calculate\n\t\t\tvar pt1;\n\t\t\tvar pt2 = region[region.length - 1];\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tpt1 = pt2;\n\t\t\t\tpt2 = region[i];\n\n\t\t\t\tvar forward = eps.pointsCompare(pt1, pt2);\n\t\t\t\tif (forward === 0) // points are equal, so we have a zero-length segment\n\t\t\t\t\tcontinue; // just skip it\n\n\t\t\t\teventAddSegment(\n\t\t\t\t\tsegmentNew(\n\t\t\t\t\t\tforward < 0 ? pt1 : pt2,\n\t\t\t\t\t\tforward < 0 ? pt2 : pt1\n\t\t\t\t\t),\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tcalculate: function(inverted){\n\t\t\t// is the polygon inverted?\n\t\t\t// returns segments\n\t\t\treturn calculate(inverted, false);\n\t\t}\n\t};\n}\n\nmodule.exports = Intersecter;\n"},"lineCount":506}},"hash":"fd9096d698d3c8d73796bf729e17dcc5","cacheData":{"env":{}}}