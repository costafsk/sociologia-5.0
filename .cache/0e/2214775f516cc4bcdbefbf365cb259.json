{"id":"../node_modules/polybooljs/lib/geojson.js","dependencies":[{"name":"/home/cassiana/DBO/sociologia-5.0/package.json","includedInParent":true,"mtime":1543792363178},{"name":"/home/cassiana/DBO/sociologia-5.0/node_modules/polybooljs/package.json","includedInParent":true,"mtime":1543792360654}],"generated":{"js":"// (c) Copyright 2017, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// convert between PolyBool polygon format and GeoJSON formats (Polygon and MultiPolygon)\n//\n\nvar GeoJSON = {\n\t// convert a GeoJSON object to a PolyBool polygon\n\ttoPolygon: function(PolyBool, geojson){\n\n\t\t// converts list of LineString's to segments\n\t\tfunction GeoPoly(coords){\n\t\t\t// check for empty coords\n\t\t\tif (coords.length <= 0)\n\t\t\t\treturn PolyBool.segments({ inverted: false, regions: [] });\n\n\t\t\t// convert LineString to segments\n\t\t\tfunction LineString(ls){\n\t\t\t\t// remove tail which should be the same as head\n\t\t\t\tvar reg = ls.slice(0, ls.length - 1);\n\t\t\t\treturn PolyBool.segments({ inverted: false, regions: [reg] });\n\t\t\t}\n\n\t\t\t// the first LineString is considered the outside\n\t\t\tvar out = LineString(coords[0]);\n\n\t\t\t// the rest of the LineStrings are considered interior holes, so subtract them from the\n\t\t\t// current result\n\t\t\tfor (var i = 1; i < coords.length; i++)\n\t\t\t\tout = PolyBool.selectDifference(PolyBool.combine(out, LineString(coords[i])));\n\n\t\t\treturn out;\n\t\t}\n\n\t\tif (geojson.type === 'Polygon'){\n\t\t\t// single polygon, so just convert it and we're done\n\t\t\treturn PolyBool.polygon(GeoPoly(geojson.coordinates));\n\t\t}\n\t\telse if (geojson.type === 'MultiPolygon'){\n\t\t\t// multiple polygons, so union all the polygons together\n\t\t\tvar out = PolyBool.segments({ inverted: false, regions: [] });\n\t\t\tfor (var i = 0; i < geojson.coordinates.length; i++)\n\t\t\t\tout = PolyBool.selectUnion(PolyBool.combine(out, GeoPoly(geojson.coordinates[i])));\n\t\t\treturn PolyBool.polygon(out);\n\t\t}\n\t\tthrow new Error('PolyBool: Cannot convert GeoJSON object to PolyBool polygon');\n\t},\n\n\t// convert a PolyBool polygon to a GeoJSON object\n\tfromPolygon: function(PolyBool, eps, poly){\n\t\t// make sure out polygon is clean\n\t\tpoly = PolyBool.polygon(PolyBool.segments(poly));\n\n\t\t// test if r1 is inside r2\n\t\tfunction regionInsideRegion(r1, r2){\n\t\t\t// we're guaranteed no lines intersect (because the polygon is clean), but a vertex\n\t\t\t// could be on the edge -- so we just average pt[0] and pt[1] to produce a point on the\n\t\t\t// edge of the first line, which cannot be on an edge\n\t\t\treturn eps.pointInsideRegion([\n\t\t\t\t(r1[0][0] + r1[1][0]) * 0.5,\n\t\t\t\t(r1[0][1] + r1[1][1]) * 0.5\n\t\t\t], r2);\n\t\t}\n\n\t\t// calculate inside heirarchy\n\t\t//\n\t\t//  _____________________   _______    roots -> A       -> F\n\t\t// |          A          | |   F   |            |          |\n\t\t// |  _______   _______  | |  ___  |            +-- B      +-- G\n\t\t// | |   B   | |   C   | | | |   | |            |   |\n\t\t// | |  ___  | |  ___  | | | |   | |            |   +-- D\n\t\t// | | | D | | | | E | | | | | G | |            |\n\t\t// | | |___| | | |___| | | | |   | |            +-- C\n\t\t// | |_______| |_______| | | |___| |                |\n\t\t// |_____________________| |_______|                +-- E\n\n\t\tfunction newNode(region){\n\t\t\treturn {\n\t\t\t\tregion: region,\n\t\t\t\tchildren: []\n\t\t\t};\n\t\t}\n\n\t\tvar roots = newNode(null);\n\n\t\tfunction addChild(root, region){\n\t\t\t// first check if we're inside any children\n\t\t\tfor (var i = 0; i < root.children.length; i++){\n\t\t\t\tvar child = root.children[i];\n\t\t\t\tif (regionInsideRegion(region, child.region)){\n\t\t\t\t\t// we are, so insert inside them instead\n\t\t\t\t\taddChild(child, region);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// not inside any children, so check to see if any children are inside us\n\t\t\tvar node = newNode(region);\n\t\t\tfor (var i = 0; i < root.children.length; i++){\n\t\t\t\tvar child = root.children[i];\n\t\t\t\tif (regionInsideRegion(child.region, region)){\n\t\t\t\t\t// oops... move the child beneath us, and remove them from root\n\t\t\t\t\tnode.children.push(child);\n\t\t\t\t\troot.children.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// now we can add ourselves\n\t\t\troot.children.push(node);\n\t\t}\n\n\t\t// add all regions to the root\n\t\tfor (var i = 0; i < poly.regions.length; i++){\n\t\t\tvar region = poly.regions[i];\n\t\t\tif (region.length < 3) // regions must have at least 3 points (sanity check)\n\t\t\t\tcontinue;\n\t\t\taddChild(roots, region);\n\t\t}\n\n\t\t// with our heirarchy, we can distinguish between exterior borders, and interior holes\n\t\t// the root nodes are exterior, children are interior, children's children are exterior,\n\t\t// children's children's children are interior, etc\n\n\t\t// while we're at it, exteriors are counter-clockwise, and interiors are clockwise\n\n\t\tfunction forceWinding(region, clockwise){\n\t\t\t// first, see if we're clockwise or counter-clockwise\n\t\t\t// https://en.wikipedia.org/wiki/Shoelace_formula\n\t\t\tvar winding = 0;\n\t\t\tvar last_x = region[region.length - 1][0];\n\t\t\tvar last_y = region[region.length - 1][1];\n\t\t\tvar copy = [];\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tvar curr_x = region[i][0];\n\t\t\t\tvar curr_y = region[i][1];\n\t\t\t\tcopy.push([curr_x, curr_y]); // create a copy while we're at it\n\t\t\t\twinding += curr_y * last_x - curr_x * last_y;\n\t\t\t\tlast_x = curr_x;\n\t\t\t\tlast_y = curr_y;\n\t\t\t}\n\t\t\t// this assumes Cartesian coordinates (Y is positive going up)\n\t\t\tvar isclockwise = winding < 0;\n\t\t\tif (isclockwise !== clockwise)\n\t\t\t\tcopy.reverse();\n\t\t\t// while we're here, the last point must be the first point...\n\t\t\tcopy.push([copy[0][0], copy[0][1]]);\n\t\t\treturn copy;\n\t\t}\n\n\t\tvar geopolys = [];\n\n\t\tfunction addExterior(node){\n\t\t\tvar poly = [forceWinding(node.region, false)];\n\t\t\tgeopolys.push(poly);\n\t\t\t// children of exteriors are interior\n\t\t\tfor (var i = 0; i < node.children.length; i++)\n\t\t\t\tpoly.push(getInterior(node.children[i]));\n\t\t}\n\n\t\tfunction getInterior(node){\n\t\t\t// children of interiors are exterior\n\t\t\tfor (var i = 0; i < node.children.length; i++)\n\t\t\t\taddExterior(node.children[i]);\n\t\t\t// return the clockwise interior\n\t\t\treturn forceWinding(node.region, true);\n\t\t}\n\n\t\t// root nodes are exterior\n\t\tfor (var i = 0; i < roots.children.length; i++)\n\t\t\taddExterior(roots.children[i]);\n\n\t\t// lastly, construct the approrpriate GeoJSON object\n\n\t\tif (geopolys.length <= 0) // empty GeoJSON Polygon\n\t\t\treturn { type: 'Polygon', coordinates: [] };\n\t\tif (geopolys.length == 1) // use a GeoJSON Polygon\n\t\t\treturn { type: 'Polygon', coordinates: geopolys[0] };\n\t\treturn { // otherwise, use a GeoJSON MultiPolygon\n\t\t\ttype: 'MultiPolygon',\n\t\t\tcoordinates: geopolys\n\t\t};\n\t}\n};\n\nmodule.exports = GeoJSON;\n","map":{"mappings":[{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/polybooljs/lib/geojson.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}}],"sources":{"../node_modules/polybooljs/lib/geojson.js":"// (c) Copyright 2017, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// convert between PolyBool polygon format and GeoJSON formats (Polygon and MultiPolygon)\n//\n\nvar GeoJSON = {\n\t// convert a GeoJSON object to a PolyBool polygon\n\ttoPolygon: function(PolyBool, geojson){\n\n\t\t// converts list of LineString's to segments\n\t\tfunction GeoPoly(coords){\n\t\t\t// check for empty coords\n\t\t\tif (coords.length <= 0)\n\t\t\t\treturn PolyBool.segments({ inverted: false, regions: [] });\n\n\t\t\t// convert LineString to segments\n\t\t\tfunction LineString(ls){\n\t\t\t\t// remove tail which should be the same as head\n\t\t\t\tvar reg = ls.slice(0, ls.length - 1);\n\t\t\t\treturn PolyBool.segments({ inverted: false, regions: [reg] });\n\t\t\t}\n\n\t\t\t// the first LineString is considered the outside\n\t\t\tvar out = LineString(coords[0]);\n\n\t\t\t// the rest of the LineStrings are considered interior holes, so subtract them from the\n\t\t\t// current result\n\t\t\tfor (var i = 1; i < coords.length; i++)\n\t\t\t\tout = PolyBool.selectDifference(PolyBool.combine(out, LineString(coords[i])));\n\n\t\t\treturn out;\n\t\t}\n\n\t\tif (geojson.type === 'Polygon'){\n\t\t\t// single polygon, so just convert it and we're done\n\t\t\treturn PolyBool.polygon(GeoPoly(geojson.coordinates));\n\t\t}\n\t\telse if (geojson.type === 'MultiPolygon'){\n\t\t\t// multiple polygons, so union all the polygons together\n\t\t\tvar out = PolyBool.segments({ inverted: false, regions: [] });\n\t\t\tfor (var i = 0; i < geojson.coordinates.length; i++)\n\t\t\t\tout = PolyBool.selectUnion(PolyBool.combine(out, GeoPoly(geojson.coordinates[i])));\n\t\t\treturn PolyBool.polygon(out);\n\t\t}\n\t\tthrow new Error('PolyBool: Cannot convert GeoJSON object to PolyBool polygon');\n\t},\n\n\t// convert a PolyBool polygon to a GeoJSON object\n\tfromPolygon: function(PolyBool, eps, poly){\n\t\t// make sure out polygon is clean\n\t\tpoly = PolyBool.polygon(PolyBool.segments(poly));\n\n\t\t// test if r1 is inside r2\n\t\tfunction regionInsideRegion(r1, r2){\n\t\t\t// we're guaranteed no lines intersect (because the polygon is clean), but a vertex\n\t\t\t// could be on the edge -- so we just average pt[0] and pt[1] to produce a point on the\n\t\t\t// edge of the first line, which cannot be on an edge\n\t\t\treturn eps.pointInsideRegion([\n\t\t\t\t(r1[0][0] + r1[1][0]) * 0.5,\n\t\t\t\t(r1[0][1] + r1[1][1]) * 0.5\n\t\t\t], r2);\n\t\t}\n\n\t\t// calculate inside heirarchy\n\t\t//\n\t\t//  _____________________   _______    roots -> A       -> F\n\t\t// |          A          | |   F   |            |          |\n\t\t// |  _______   _______  | |  ___  |            +-- B      +-- G\n\t\t// | |   B   | |   C   | | | |   | |            |   |\n\t\t// | |  ___  | |  ___  | | | |   | |            |   +-- D\n\t\t// | | | D | | | | E | | | | | G | |            |\n\t\t// | | |___| | | |___| | | | |   | |            +-- C\n\t\t// | |_______| |_______| | | |___| |                |\n\t\t// |_____________________| |_______|                +-- E\n\n\t\tfunction newNode(region){\n\t\t\treturn {\n\t\t\t\tregion: region,\n\t\t\t\tchildren: []\n\t\t\t};\n\t\t}\n\n\t\tvar roots = newNode(null);\n\n\t\tfunction addChild(root, region){\n\t\t\t// first check if we're inside any children\n\t\t\tfor (var i = 0; i < root.children.length; i++){\n\t\t\t\tvar child = root.children[i];\n\t\t\t\tif (regionInsideRegion(region, child.region)){\n\t\t\t\t\t// we are, so insert inside them instead\n\t\t\t\t\taddChild(child, region);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// not inside any children, so check to see if any children are inside us\n\t\t\tvar node = newNode(region);\n\t\t\tfor (var i = 0; i < root.children.length; i++){\n\t\t\t\tvar child = root.children[i];\n\t\t\t\tif (regionInsideRegion(child.region, region)){\n\t\t\t\t\t// oops... move the child beneath us, and remove them from root\n\t\t\t\t\tnode.children.push(child);\n\t\t\t\t\troot.children.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// now we can add ourselves\n\t\t\troot.children.push(node);\n\t\t}\n\n\t\t// add all regions to the root\n\t\tfor (var i = 0; i < poly.regions.length; i++){\n\t\t\tvar region = poly.regions[i];\n\t\t\tif (region.length < 3) // regions must have at least 3 points (sanity check)\n\t\t\t\tcontinue;\n\t\t\taddChild(roots, region);\n\t\t}\n\n\t\t// with our heirarchy, we can distinguish between exterior borders, and interior holes\n\t\t// the root nodes are exterior, children are interior, children's children are exterior,\n\t\t// children's children's children are interior, etc\n\n\t\t// while we're at it, exteriors are counter-clockwise, and interiors are clockwise\n\n\t\tfunction forceWinding(region, clockwise){\n\t\t\t// first, see if we're clockwise or counter-clockwise\n\t\t\t// https://en.wikipedia.org/wiki/Shoelace_formula\n\t\t\tvar winding = 0;\n\t\t\tvar last_x = region[region.length - 1][0];\n\t\t\tvar last_y = region[region.length - 1][1];\n\t\t\tvar copy = [];\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tvar curr_x = region[i][0];\n\t\t\t\tvar curr_y = region[i][1];\n\t\t\t\tcopy.push([curr_x, curr_y]); // create a copy while we're at it\n\t\t\t\twinding += curr_y * last_x - curr_x * last_y;\n\t\t\t\tlast_x = curr_x;\n\t\t\t\tlast_y = curr_y;\n\t\t\t}\n\t\t\t// this assumes Cartesian coordinates (Y is positive going up)\n\t\t\tvar isclockwise = winding < 0;\n\t\t\tif (isclockwise !== clockwise)\n\t\t\t\tcopy.reverse();\n\t\t\t// while we're here, the last point must be the first point...\n\t\t\tcopy.push([copy[0][0], copy[0][1]]);\n\t\t\treturn copy;\n\t\t}\n\n\t\tvar geopolys = [];\n\n\t\tfunction addExterior(node){\n\t\t\tvar poly = [forceWinding(node.region, false)];\n\t\t\tgeopolys.push(poly);\n\t\t\t// children of exteriors are interior\n\t\t\tfor (var i = 0; i < node.children.length; i++)\n\t\t\t\tpoly.push(getInterior(node.children[i]));\n\t\t}\n\n\t\tfunction getInterior(node){\n\t\t\t// children of interiors are exterior\n\t\t\tfor (var i = 0; i < node.children.length; i++)\n\t\t\t\taddExterior(node.children[i]);\n\t\t\t// return the clockwise interior\n\t\t\treturn forceWinding(node.region, true);\n\t\t}\n\n\t\t// root nodes are exterior\n\t\tfor (var i = 0; i < roots.children.length; i++)\n\t\t\taddExterior(roots.children[i]);\n\n\t\t// lastly, construct the approrpriate GeoJSON object\n\n\t\tif (geopolys.length <= 0) // empty GeoJSON Polygon\n\t\t\treturn { type: 'Polygon', coordinates: [] };\n\t\tif (geopolys.length == 1) // use a GeoJSON Polygon\n\t\t\treturn { type: 'Polygon', coordinates: geopolys[0] };\n\t\treturn { // otherwise, use a GeoJSON MultiPolygon\n\t\t\ttype: 'MultiPolygon',\n\t\t\tcoordinates: geopolys\n\t\t};\n\t}\n};\n\nmodule.exports = GeoJSON;\n"},"lineCount":189}},"hash":"a1ec12cb069b3a532a5adb426a5be558","cacheData":{"env":{}}}