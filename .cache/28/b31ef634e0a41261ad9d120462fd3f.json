{"id":"../node_modules/plotly.js/src/lib/regex.js","dependencies":[{"name":"/home/cassiana/DBO/sociologia-5.0/package.json","includedInParent":true,"mtime":1543792363178},{"name":"/home/cassiana/DBO/sociologia-5.0/node_modules/plotly.js/package.json","includedInParent":true,"mtime":1543792360654}],"generated":{"js":"/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/*\n * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...\n *\n * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.\n *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc\n * @param {Optional(string)} tail: a fixed piece after the id\n *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.\n * @param {boolean} openEnded: if true, the string may continue past the match.\n */\nexports.counter = function(head, tail, openEnded) {\n    var fullTail = (tail || '') + (openEnded ? '' : '$');\n    if(head === 'xy') {\n        return new RegExp('^x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);\n    }\n    return new RegExp('^' + head + '([2-9]|[1-9][0-9]+)?' + fullTail);\n};\n","map":{"mappings":[{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/plotly.js/src/lib/regex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"../node_modules/plotly.js/src/lib/regex.js":"/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/*\n * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...\n *\n * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.\n *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc\n * @param {Optional(string)} tail: a fixed piece after the id\n *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.\n * @param {boolean} openEnded: if true, the string may continue past the match.\n */\nexports.counter = function(head, tail, openEnded) {\n    var fullTail = (tail || '') + (openEnded ? '' : '$');\n    if(head === 'xy') {\n        return new RegExp('^x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);\n    }\n    return new RegExp('^' + head + '([2-9]|[1-9][0-9]+)?' + fullTail);\n};\n"},"lineCount":27}},"hash":"4a633fefafba0963a370db637c1ebe29","cacheData":{"env":{}}}