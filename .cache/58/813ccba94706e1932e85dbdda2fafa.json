{"id":"../node_modules/polybooljs/lib/epsilon.js","dependencies":[{"name":"/home/cassiana/DBO/sociologia-5.0/package.json","includedInParent":true,"mtime":1543792363178},{"name":"/home/cassiana/DBO/sociologia-5.0/node_modules/polybooljs/package.json","includedInParent":true,"mtime":1543792360654}],"generated":{"js":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// provides the raw computation functions that takes epsilon into account\n//\n// zero is defined to be between (-epsilon, epsilon) exclusive\n//\n\nfunction Epsilon(eps){\n\tif (typeof eps !== 'number')\n\t\teps = 0.0000000001; // sane default? sure why not\n\tvar my = {\n\t\tepsilon: function(v){\n\t\t\tif (typeof v === 'number')\n\t\t\t\teps = v;\n\t\t\treturn eps;\n\t\t},\n\t\tpointAboveOrOnLine: function(pt, left, right){\n\t\t\tvar Ax = left[0];\n\t\t\tvar Ay = left[1];\n\t\t\tvar Bx = right[0];\n\t\t\tvar By = right[1];\n\t\t\tvar Cx = pt[0];\n\t\t\tvar Cy = pt[1];\n\t\t\treturn (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -eps;\n\t\t},\n\t\tpointBetween: function(p, left, right){\n\t\t\t// p must be collinear with left->right\n\t\t\t// returns false if p == left, p == right, or left == right\n\t\t\tvar d_py_ly = p[1] - left[1];\n\t\t\tvar d_rx_lx = right[0] - left[0];\n\t\t\tvar d_px_lx = p[0] - left[0];\n\t\t\tvar d_ry_ly = right[1] - left[1];\n\n\t\t\tvar dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;\n\t\t\t// if `dot` is 0, then `p` == `left` or `left` == `right` (reject)\n\t\t\t// if `dot` is less than 0, then `p` is to the left of `left` (reject)\n\t\t\tif (dot < eps)\n\t\t\t\treturn false;\n\n\t\t\tvar sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;\n\t\t\t// if `dot` > `sqlen`, then `p` is to the right of `right` (reject)\n\t\t\t// therefore, if `dot - sqlen` is greater than 0, then `p` is to the right of `right` (reject)\n\t\t\tif (dot - sqlen > -eps)\n\t\t\t\treturn false;\n\n\t\t\treturn true;\n\t\t},\n\t\tpointsSameX: function(p1, p2){\n\t\t\treturn Math.abs(p1[0] - p2[0]) < eps;\n\t\t},\n\t\tpointsSameY: function(p1, p2){\n\t\t\treturn Math.abs(p1[1] - p2[1]) < eps;\n\t\t},\n\t\tpointsSame: function(p1, p2){\n\t\t\treturn my.pointsSameX(p1, p2) && my.pointsSameY(p1, p2);\n\t\t},\n\t\tpointsCompare: function(p1, p2){\n\t\t\t// returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal\n\t\t\tif (my.pointsSameX(p1, p2))\n\t\t\t\treturn my.pointsSameY(p1, p2) ? 0 : (p1[1] < p2[1] ? -1 : 1);\n\t\t\treturn p1[0] < p2[0] ? -1 : 1;\n\t\t},\n\t\tpointsCollinear: function(pt1, pt2, pt3){\n\t\t\t// does pt1->pt2->pt3 make a straight line?\n\t\t\t// essentially this is just checking to see if the slope(pt1->pt2) === slope(pt2->pt3)\n\t\t\t// if slopes are equal, then they must be collinear, because they share pt2\n\t\t\tvar dx1 = pt1[0] - pt2[0];\n\t\t\tvar dy1 = pt1[1] - pt2[1];\n\t\t\tvar dx2 = pt2[0] - pt3[0];\n\t\t\tvar dy2 = pt2[1] - pt3[1];\n\t\t\treturn Math.abs(dx1 * dy2 - dx2 * dy1) < eps;\n\t\t},\n\t\tlinesIntersect: function(a0, a1, b0, b1){\n\t\t\t// returns false if the lines are coincident (e.g., parallel or on top of each other)\n\t\t\t//\n\t\t\t// returns an object if the lines intersect:\n\t\t\t//   {\n\t\t\t//     pt: [x, y],    where the intersection point is at\n\t\t\t//     alongA: where intersection point is along A,\n\t\t\t//     alongB: where intersection point is along B\n\t\t\t//   }\n\t\t\t//\n\t\t\t//  alongA and alongB will each be one of: -2, -1, 0, 1, 2\n\t\t\t//\n\t\t\t//  with the following meaning:\n\t\t\t//\n\t\t\t//    -2   intersection point is before segment's first point\n\t\t\t//    -1   intersection point is directly on segment's first point\n\t\t\t//     0   intersection point is between segment's first and second points (exclusive)\n\t\t\t//     1   intersection point is directly on segment's second point\n\t\t\t//     2   intersection point is after segment's second point\n\t\t\tvar adx = a1[0] - a0[0];\n\t\t\tvar ady = a1[1] - a0[1];\n\t\t\tvar bdx = b1[0] - b0[0];\n\t\t\tvar bdy = b1[1] - b0[1];\n\n\t\t\tvar axb = adx * bdy - ady * bdx;\n\t\t\tif (Math.abs(axb) < eps)\n\t\t\t\treturn false; // lines are coincident\n\n\t\t\tvar dx = a0[0] - b0[0];\n\t\t\tvar dy = a0[1] - b0[1];\n\n\t\t\tvar A = (bdx * dy - bdy * dx) / axb;\n\t\t\tvar B = (adx * dy - ady * dx) / axb;\n\n\t\t\tvar ret = {\n\t\t\t\talongA: 0,\n\t\t\t\talongB: 0,\n\t\t\t\tpt: [\n\t\t\t\t\ta0[0] + A * adx,\n\t\t\t\t\ta0[1] + A * ady\n\t\t\t\t]\n\t\t\t};\n\n\t\t\t// categorize where intersection point is along A and B\n\n\t\t\tif (A <= -eps)\n\t\t\t\tret.alongA = -2;\n\t\t\telse if (A < eps)\n\t\t\t\tret.alongA = -1;\n\t\t\telse if (A - 1 <= -eps)\n\t\t\t\tret.alongA = 0;\n\t\t\telse if (A - 1 < eps)\n\t\t\t\tret.alongA = 1;\n\t\t\telse\n\t\t\t\tret.alongA = 2;\n\n\t\t\tif (B <= -eps)\n\t\t\t\tret.alongB = -2;\n\t\t\telse if (B < eps)\n\t\t\t\tret.alongB = -1;\n\t\t\telse if (B - 1 <= -eps)\n\t\t\t\tret.alongB = 0;\n\t\t\telse if (B - 1 < eps)\n\t\t\t\tret.alongB = 1;\n\t\t\telse\n\t\t\t\tret.alongB = 2;\n\n\t\t\treturn ret;\n\t\t},\n\t\tpointInsideRegion: function(pt, region){\n\t\t\tvar x = pt[0];\n\t\t\tvar y = pt[1];\n\t\t\tvar last_x = region[region.length - 1][0];\n\t\t\tvar last_y = region[region.length - 1][1];\n\t\t\tvar inside = false;\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tvar curr_x = region[i][0];\n\t\t\t\tvar curr_y = region[i][1];\n\n\t\t\t\t// if y is between curr_y and last_y, and\n\t\t\t\t// x is to the right of the boundary created by the line\n\t\t\t\tif ((curr_y - y > eps) != (last_y - y > eps) &&\n\t\t\t\t\t(last_x - curr_x) * (y - curr_y) / (last_y - curr_y) + curr_x - x > eps)\n\t\t\t\t\tinside = !inside\n\n\t\t\t\tlast_x = curr_x;\n\t\t\t\tlast_y = curr_y;\n\t\t\t}\n\t\t\treturn inside;\n\t\t}\n\t};\n\treturn my;\n}\n\nmodule.exports = Epsilon;\n","map":{"mappings":[{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/polybooljs/lib/epsilon.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}}],"sources":{"../node_modules/polybooljs/lib/epsilon.js":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// provides the raw computation functions that takes epsilon into account\n//\n// zero is defined to be between (-epsilon, epsilon) exclusive\n//\n\nfunction Epsilon(eps){\n\tif (typeof eps !== 'number')\n\t\teps = 0.0000000001; // sane default? sure why not\n\tvar my = {\n\t\tepsilon: function(v){\n\t\t\tif (typeof v === 'number')\n\t\t\t\teps = v;\n\t\t\treturn eps;\n\t\t},\n\t\tpointAboveOrOnLine: function(pt, left, right){\n\t\t\tvar Ax = left[0];\n\t\t\tvar Ay = left[1];\n\t\t\tvar Bx = right[0];\n\t\t\tvar By = right[1];\n\t\t\tvar Cx = pt[0];\n\t\t\tvar Cy = pt[1];\n\t\t\treturn (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -eps;\n\t\t},\n\t\tpointBetween: function(p, left, right){\n\t\t\t// p must be collinear with left->right\n\t\t\t// returns false if p == left, p == right, or left == right\n\t\t\tvar d_py_ly = p[1] - left[1];\n\t\t\tvar d_rx_lx = right[0] - left[0];\n\t\t\tvar d_px_lx = p[0] - left[0];\n\t\t\tvar d_ry_ly = right[1] - left[1];\n\n\t\t\tvar dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;\n\t\t\t// if `dot` is 0, then `p` == `left` or `left` == `right` (reject)\n\t\t\t// if `dot` is less than 0, then `p` is to the left of `left` (reject)\n\t\t\tif (dot < eps)\n\t\t\t\treturn false;\n\n\t\t\tvar sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;\n\t\t\t// if `dot` > `sqlen`, then `p` is to the right of `right` (reject)\n\t\t\t// therefore, if `dot - sqlen` is greater than 0, then `p` is to the right of `right` (reject)\n\t\t\tif (dot - sqlen > -eps)\n\t\t\t\treturn false;\n\n\t\t\treturn true;\n\t\t},\n\t\tpointsSameX: function(p1, p2){\n\t\t\treturn Math.abs(p1[0] - p2[0]) < eps;\n\t\t},\n\t\tpointsSameY: function(p1, p2){\n\t\t\treturn Math.abs(p1[1] - p2[1]) < eps;\n\t\t},\n\t\tpointsSame: function(p1, p2){\n\t\t\treturn my.pointsSameX(p1, p2) && my.pointsSameY(p1, p2);\n\t\t},\n\t\tpointsCompare: function(p1, p2){\n\t\t\t// returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal\n\t\t\tif (my.pointsSameX(p1, p2))\n\t\t\t\treturn my.pointsSameY(p1, p2) ? 0 : (p1[1] < p2[1] ? -1 : 1);\n\t\t\treturn p1[0] < p2[0] ? -1 : 1;\n\t\t},\n\t\tpointsCollinear: function(pt1, pt2, pt3){\n\t\t\t// does pt1->pt2->pt3 make a straight line?\n\t\t\t// essentially this is just checking to see if the slope(pt1->pt2) === slope(pt2->pt3)\n\t\t\t// if slopes are equal, then they must be collinear, because they share pt2\n\t\t\tvar dx1 = pt1[0] - pt2[0];\n\t\t\tvar dy1 = pt1[1] - pt2[1];\n\t\t\tvar dx2 = pt2[0] - pt3[0];\n\t\t\tvar dy2 = pt2[1] - pt3[1];\n\t\t\treturn Math.abs(dx1 * dy2 - dx2 * dy1) < eps;\n\t\t},\n\t\tlinesIntersect: function(a0, a1, b0, b1){\n\t\t\t// returns false if the lines are coincident (e.g., parallel or on top of each other)\n\t\t\t//\n\t\t\t// returns an object if the lines intersect:\n\t\t\t//   {\n\t\t\t//     pt: [x, y],    where the intersection point is at\n\t\t\t//     alongA: where intersection point is along A,\n\t\t\t//     alongB: where intersection point is along B\n\t\t\t//   }\n\t\t\t//\n\t\t\t//  alongA and alongB will each be one of: -2, -1, 0, 1, 2\n\t\t\t//\n\t\t\t//  with the following meaning:\n\t\t\t//\n\t\t\t//    -2   intersection point is before segment's first point\n\t\t\t//    -1   intersection point is directly on segment's first point\n\t\t\t//     0   intersection point is between segment's first and second points (exclusive)\n\t\t\t//     1   intersection point is directly on segment's second point\n\t\t\t//     2   intersection point is after segment's second point\n\t\t\tvar adx = a1[0] - a0[0];\n\t\t\tvar ady = a1[1] - a0[1];\n\t\t\tvar bdx = b1[0] - b0[0];\n\t\t\tvar bdy = b1[1] - b0[1];\n\n\t\t\tvar axb = adx * bdy - ady * bdx;\n\t\t\tif (Math.abs(axb) < eps)\n\t\t\t\treturn false; // lines are coincident\n\n\t\t\tvar dx = a0[0] - b0[0];\n\t\t\tvar dy = a0[1] - b0[1];\n\n\t\t\tvar A = (bdx * dy - bdy * dx) / axb;\n\t\t\tvar B = (adx * dy - ady * dx) / axb;\n\n\t\t\tvar ret = {\n\t\t\t\talongA: 0,\n\t\t\t\talongB: 0,\n\t\t\t\tpt: [\n\t\t\t\t\ta0[0] + A * adx,\n\t\t\t\t\ta0[1] + A * ady\n\t\t\t\t]\n\t\t\t};\n\n\t\t\t// categorize where intersection point is along A and B\n\n\t\t\tif (A <= -eps)\n\t\t\t\tret.alongA = -2;\n\t\t\telse if (A < eps)\n\t\t\t\tret.alongA = -1;\n\t\t\telse if (A - 1 <= -eps)\n\t\t\t\tret.alongA = 0;\n\t\t\telse if (A - 1 < eps)\n\t\t\t\tret.alongA = 1;\n\t\t\telse\n\t\t\t\tret.alongA = 2;\n\n\t\t\tif (B <= -eps)\n\t\t\t\tret.alongB = -2;\n\t\t\telse if (B < eps)\n\t\t\t\tret.alongB = -1;\n\t\t\telse if (B - 1 <= -eps)\n\t\t\t\tret.alongB = 0;\n\t\t\telse if (B - 1 < eps)\n\t\t\t\tret.alongB = 1;\n\t\t\telse\n\t\t\t\tret.alongB = 2;\n\n\t\t\treturn ret;\n\t\t},\n\t\tpointInsideRegion: function(pt, region){\n\t\t\tvar x = pt[0];\n\t\t\tvar y = pt[1];\n\t\t\tvar last_x = region[region.length - 1][0];\n\t\t\tvar last_y = region[region.length - 1][1];\n\t\t\tvar inside = false;\n\t\t\tfor (var i = 0; i < region.length; i++){\n\t\t\t\tvar curr_x = region[i][0];\n\t\t\t\tvar curr_y = region[i][1];\n\n\t\t\t\t// if y is between curr_y and last_y, and\n\t\t\t\t// x is to the right of the boundary created by the line\n\t\t\t\tif ((curr_y - y > eps) != (last_y - y > eps) &&\n\t\t\t\t\t(last_x - curr_x) * (y - curr_y) / (last_y - curr_y) + curr_x - x > eps)\n\t\t\t\t\tinside = !inside\n\n\t\t\t\tlast_x = curr_x;\n\t\t\t\tlast_y = curr_y;\n\t\t\t}\n\t\t\treturn inside;\n\t\t}\n\t};\n\treturn my;\n}\n\nmodule.exports = Epsilon;\n"},"lineCount":171}},"hash":"0cbcaa947f7844d38eb24d241f1c0a4e","cacheData":{"env":{}}}